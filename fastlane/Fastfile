require 'shellwords'

default_platform(:mac)

platform :mac do
  desc "Builds and signs the macOS application using the Developer ID certificate and provisioning profile obtained from match."
  lane :build_snapshot do
    match(
      app_identifier: 'com.agoda.fleet.virtualization',
      type: 'developer_id',
      verbose: true
    )
    build_and_sign_macos_app('snapshot')
  end

  desc "Builds, signs, and releases the macOS application using the Developer ID certificate and provisioning profile obtained from match."
  lane :build_release do
    match(
      app_identifier: 'com.agoda.fleet.virtualization',
      type: 'developer_id',
      verbose: true
    )
    build_and_sign_macos_app('release')
  end
end

def build_and_sign_macos_app(target)
  Fastlane::Actions.execute_action("Build and sign macOS app") do
    # Retrieve the necessary environment variables set by match
    release_certificate_name = ENV['sigh_com.agoda.fleet.virtualization_developer_id_macos_certificate-name']
    release_provision_profile_path = ENV['sigh_com.agoda.fleet.virtualization_developer_id_macos_profile-path']

    # Log the start of the build process
    Fastlane::UI.message("Starting the build process for #{target}...")

    # Change directory
    Fastlane::UI.message("Changing directory to project root...")
    Dir.chdir("..") do
      # Set environment variables
      Fastlane::UI.message("Setting environment variables...")
      ENV['RELEASE_CERTIFICATE_NAME'] = Shellwords.escape(release_certificate_name)
      ENV['RELEASE_PROVISION_PROFILE_PATH'] = Shellwords.escape(release_provision_profile_path)

      # Log the environment variables being used
      Fastlane::UI.message("Using certificate: #{release_certificate_name}")
      Fastlane::UI.message("Using provisioning profile: #{release_provision_profile_path}")

      # Call the appropriate make command based on the target
      make_command = target == 'release' ? 'make release' : 'make snapshot'
      Fastlane::UI.message("Running #{make_command} command...")
      sh(make_command)
    end

    # Log the completion of the build process
    Fastlane::UI.message("#{target.capitalize} process completed.")
  end
end
