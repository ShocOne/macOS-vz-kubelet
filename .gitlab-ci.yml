stages:
  - test
  - build
  - release

default:
  # All jobs are interruptible.
  # If any job must be uninterruptible, override this flag at the job level
  # `interruptible: false`
  interruptible: true

variables:
  APP_NAME: "MacOSVK"

.go-build-macos:
  image: macos-sonoma-runner:15.0.1
  tags:
    - macos.medium
  variables:
    GOPATH: "$CI_PROJECT_DIR/.go"
    MISE_CACHE_DIR: "$CI_PROJECT_DIR/.mise/cache"
    MISE_DATA_DIR: "$CI_PROJECT_DIR/.mise/data"
  before_script:
    - |
      printf "\e[0Ksection_start:%s:prepare_go[collapsed=true]\r\e[0K%s\n" "$(date +%s)" "Prepare Go environment"
      mkdir -p ".go"
      curl -fsS https://mise.run | sh
      export PATH="$HOME/.local/bin:$PATH"
      mise install
      eval "$(mise activate bash --shims)"
      printf "\e[0Ksection_end:%s:prepare_go\r\e[0K\n" "$(date +%s)"
  cache:
    - key:
        files:
          - go.mod
          - go.sum
      paths:
        - .go/pkg/mod/
    - key:
        files:
          - .mise.toml
      paths:
        - .mise

.go-coverage:
  variables:
    GOCOVERPKG: "github.com/agoda-com/macOS-vz-kubelet/..."
    JUNIT_FILE: "${CI_PROJECT_DIR}/build/junit.xml"
    CODECOV_FILE: "${CI_PROJECT_DIR}/build/coverage.xml"
    CODECOV_FLAG: ""
  coverage: '/total\s+\(statements\)\s+(\d+.\d+)%/'
  after_script:
    - |
      printf "\e[0Ksection_start:%s:codecov[collapsed=false]\r\e[0K%s\n" "$(date +%s)" "Upload coverage to Codecov"
      mv "$CODECOV_CONFIG" "$CI_PROJECT_DIR/codecov.yml"
      args=""
      if [ -n "${CODECOV_TOKEN}" ]; then
        args="$args -t ${CODECOV_TOKEN}"
      fi
      if [ -n "${CODECOV_FILE}" ]; then
        args="$args -f ${CODECOV_FILE}"
      fi
      if [ -n "${CODECOV_FLAG}" ]; then
        args="$args -F ${CODECOV_FLAG}"
      fi
      bash <(curl -s ${CODECOV_URL:-https://codecov.io}/bash) $args
      printf "\e[0Ksection_end:%s:codecov\r\e[0K\n" "$(date +%s)"
  artifacts:
    reports:
      junit: "${JUNIT_FILE}"

lint:
  extends:
    - .go-build-macos
  stage: test
  needs: []
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_ID
  script:
    - make generate format
    - 'git diff --exit-code || (echo -e "\e[31mERROR: Run make generate format and commit changes\e[0m" && exit 1)'
    - make lint

test:
  extends:
    - .go-build-macos
    - .go-coverage
  stage: test
  needs: []
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_ID
  script:
    - make integration-test coverage

.build:
  extends:
    - .go-build-macos
  variables:
    APPLE_DEVELOPER_ID_INTERMEDIATE_CERT_G1_URL: "https://www.apple.com/certificateauthority/DeveloperIDCA.cer"
    APPLE_DEVELOPER_ID_INTERMEDIATE_CERT_G2_URL: "https://www.apple.com/certificateauthority/DeveloperIDG2CA.cer"
    SPACESHIP_SKIP_2FA_UPGRADE: 1 # Skip 2FA upgrade for fastlane
  cache:
    - !reference [.go-build-macos, cache]
    - key:
        files:
          - Gemfile.lock
      paths:
        - ruby
  before_script:
    - set -eo pipefail
    - !reference [.go-build-macos, before_script]
    - |
      printf "\e[0Ksection_start:%s:prepare_intermediate_cert[collapsed=true]\r\e[0K%s\n" "$(date +%s)" "Prepare Apple Developer ID Intermediate Certificate"
      prepare_certificate() {
        local cert_url="$1"
        local cert_path="$(mktemp)"
        curl -fsS "$cert_url" -o "$cert_path"
        sudo security import "$cert_path" /Library/Keychains/System.keychain
      }

      prepare_certificate "$APPLE_DEVELOPER_ID_INTERMEDIATE_CERT_G1_URL"
      prepare_certificate "$APPLE_DEVELOPER_ID_INTERMEDIATE_CERT_G2_URL"
      printf "\e[0Ksection_end:%s:prepare_intermediate_cert\r\e[0K\n" "$(date +%s)"
    - |
      printf "\e[0Ksection_start:%s:prepare_fastlane[collapsed=true]\r\e[0K%s\n" "$(date +%s)" "Prepare Fastlane environment"
      echo "Copying fastlane related secret configuration files..."
      cp "$APPFILE" "$CI_PROJECT_DIR/fastlane/Appfile"
      cp "$MATCHFILE" "$CI_PROJECT_DIR/fastlane/Matchfile"
      echo "Installing fastlane..."
      bundle install
      printf "\e[0Ksection_end:%s:prepare_fastlane\r\e[0K\n" "$(date +%s)"

snapshot:
  extends: .build
  stage: build
  needs:
    - job: lint
      optional: true
    - job: unit-test
      optional: true
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_ID
  script:
    - set -eo pipefail
    - |
      printf "\e[0Ksection_start:%s:build_project[collapsed=false]\r\e[0K%s\n" "$(date +%s)" "Build and sign project"
      bundle exec fastlane build_snapshot
      printf "\e[0Ksection_end:%s:build_project\r\e[0K\n" "$(date +%s)"
  artifacts:
    paths:
      - build/*/*.app
    expire_in: 1 week

release:
  extends: .build
  stage: release
  needs: []
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    GITLAB_TOKEN: "${CI_JOB_TOKEN}"
  script:
    - set -eo pipefail
    - |
      printf "\e[0Ksection_start:%s:release_project[collapsed=false]\r\e[0K%s\n" "$(date +%s)" "Release project"
      bundle exec fastlane build_release
      printf "\e[0Ksection_end:%s:release_project\r\e[0K\n" "$(date +%s)"
